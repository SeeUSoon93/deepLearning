import cv2
import mediapipe as mp
import numpy as np
import time, os

# 손동작 인식을 위한 라벨 정의
actions = ['greetings', 'hello', 'meet', 'part', 'glad', 'worry', 'introduction', 'name', 'age', 'you', 'me', 'live', 'know', 'dont know', 'right', 'no', 'what', 'thanks', 'fine', 'want']
seq_length = 30  # 시퀀스 길이
secs_for_action = 60  # 각 동작을 녹화할 시간

# MediaPipe 손 모델 초기화
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.5, min_tracking_confidence=0.5)

# 웹캠 초기화
cap = cv2.VideoCapture(0)
created_time = int(time.time())

# 데이터셋 저장 경로 설정
os.makedirs('dataset', exist_ok=True)

# 웹캠을 통해 각 동작 녹화 시작
while cap.isOpened():
    for idx, action in enumerate(actions):
        data = []  # 동작 데이터를 저장할 리스트
        ret, img = cap.read()
        img = cv2.flip(img, 1)  # 화면을 좌우 반전

        start_time = time.time()
        while time.time() - start_time < secs_for_action:
            ret, img = cap.read()
            img = cv2.flip(img, 1)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            result = hands.process(img)  # 손 위치 추적
            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

            if result.multi_hand_landmarks is not None:
                for res in result.multi_hand_landmarks:
                    joint = np.zeros((21, 4))  # 관절 위치 정보
                    for j, lm in enumerate(res.landmark):
                        joint[j] = [lm.x, lm.y, lm.z, lm.visibility]
                        
                        # 각 관절 간의 각도 계산
                        v1 = joint[[0, 1, 2, 3, 0, 5, 6, 7, 0, 9, 10, 11, 0, 13, 14, 15, 0, 17, 18, 19], :3]
                        v2 = joint[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], :3]
                        v = v2 - v1
                        v = v / np.linalg.norm(v, axis=1)[:, np.newaxis]
                        angle = np.arccos(np.einsum('nt,nt->n', v[[0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18], :], v[[1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19], :]))
                        angle = np.degrees(angle)  # 라디안을 도로 변환
                        angle_label = np.array([angle], dtype=np.float32)
                        angle_label = np.append(angle_label, idx)
                        d = np.concatenate([joint.flatten(), angle_label])
                        data.append(d)
                        mp_drawing.draw_landmarks(img, res, mp_hands.HAND_CONNECTIONS)
                    cv2.imshow('img', img)
                    if cv2.waitKey(1) == ord('q'):
                        break

            data = np.array(data)
            print(action, data.shape)
            np.save(os.path.join('dataset', f'raw_{action}_{created_time}'), data)

            # 시퀀스 데이터 생성
            full_seq_data = []
            for seq in range(len(data) - seq_length):
                full_seq_data.append(data[seq:seq + seq_length])
            full_seq_data = np.array(full_seq_data)
            print(action, full_seq_data.shape)
            np.save(os.path.join('dataset', f'seq_{action}_{created_time}'), full_seq_data)
